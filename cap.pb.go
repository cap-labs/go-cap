// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cap.proto

package cap

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Peer struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Addresses            []string `protobuf:"bytes,2,rep,name=Addresses,proto3" json:"Addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_20b472bdd64c0623, []int{0}
}

func (m *Peer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Peer.Unmarshal(m, b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
}
func (m *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(m, src)
}
func (m *Peer) XXX_Size() int {
	return xxx_messageInfo_Peer.Size(m)
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

func (m *Peer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Peer) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// Cluster the peers collection
type Cluster struct {
	Peers                []*Peer  `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cluster) Reset()         { *m = Cluster{} }
func (m *Cluster) String() string { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()    {}
func (*Cluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_20b472bdd64c0623, []int{1}
}

func (m *Cluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster.Unmarshal(m, b)
}
func (m *Cluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster.Marshal(b, m, deterministic)
}
func (m *Cluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster.Merge(m, src)
}
func (m *Cluster) XXX_Size() int {
	return xxx_messageInfo_Cluster.Size(m)
}
func (m *Cluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster proto.InternalMessageInfo

func (m *Cluster) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type StreamPacket struct {
	PeerId               string   `protobuf:"bytes,1,opt,name=PeerId,proto3" json:"PeerId,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamPacket) Reset()         { *m = StreamPacket{} }
func (m *StreamPacket) String() string { return proto.CompactTextString(m) }
func (*StreamPacket) ProtoMessage()    {}
func (*StreamPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_20b472bdd64c0623, []int{2}
}

func (m *StreamPacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamPacket.Unmarshal(m, b)
}
func (m *StreamPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamPacket.Marshal(b, m, deterministic)
}
func (m *StreamPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamPacket.Merge(m, src)
}
func (m *StreamPacket) XXX_Size() int {
	return xxx_messageInfo_StreamPacket.Size(m)
}
func (m *StreamPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamPacket.DiscardUnknown(m)
}

var xxx_messageInfo_StreamPacket proto.InternalMessageInfo

func (m *StreamPacket) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *StreamPacket) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*Peer)(nil), "cap.Peer")
	proto.RegisterType((*Cluster)(nil), "cap.Cluster")
	proto.RegisterType((*StreamPacket)(nil), "cap.StreamPacket")
}

func init() { proto.RegisterFile("cap.proto", fileDescriptor_20b472bdd64c0623) }

var fileDescriptor_20b472bdd64c0623 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0x87, 0xc9, 0xae, 0xdd, 0x25, 0xd3, 0x56, 0x30, 0x07, 0x09, 0x22, 0xb8, 0xec, 0x29, 0x78,
	0x28, 0x12, 0x7d, 0x00, 0xcb, 0x5e, 0xec, 0x45, 0xca, 0xf6, 0x09, 0xe2, 0x66, 0x0e, 0xa5, 0x6b,
	0x12, 0x26, 0x23, 0xbe, 0xbe, 0x6c, 0xeb, 0x3f, 0xe8, 0xf1, 0xf7, 0x0d, 0x7c, 0x1f, 0x0c, 0xc8,
	0xc1, 0xa5, 0x55, 0xa2, 0xc8, 0x51, 0x95, 0x83, 0x4b, 0xed, 0x13, 0x5c, 0x6c, 0x11, 0x49, 0x5d,
	0x42, 0xb1, 0xf1, 0x5a, 0x34, 0xc2, 0xc8, 0xbe, 0xd8, 0x78, 0x75, 0x0b, 0x72, 0xed, 0x3d, 0x61,
	0xce, 0x98, 0x75, 0xd1, 0x94, 0x46, 0xf6, 0x7f, 0xa0, 0xbd, 0x87, 0xba, 0x1b, 0x3f, 0x32, 0x23,
	0xa9, 0x3b, 0x98, 0x25, 0x44, 0xca, 0x5a, 0x34, 0xa5, 0x99, 0x5b, 0xb9, 0x9a, 0x02, 0x93, 0xb2,
	0x3f, 0xf1, 0xf6, 0x19, 0x16, 0x3b, 0x26, 0x74, 0xef, 0x5b, 0x37, 0x1c, 0x90, 0xd5, 0x35, 0x54,
	0xd3, 0xf9, 0xb7, 0xf6, 0xbd, 0x94, 0x86, 0xba, 0x8b, 0x81, 0x31, 0xb0, 0x2e, 0x1a, 0x61, 0x16,
	0xfd, 0xcf, 0xb4, 0x1d, 0x2c, 0x5f, 0x91, 0x3f, 0x23, 0x1d, 0x4e, 0x22, 0x65, 0xa1, 0x7a, 0x71,
	0xc1, 0x8f, 0xa8, 0xae, 0x8e, 0xb9, 0xff, 0xfe, 0x9b, 0x73, 0x64, 0xc4, 0x83, 0xb0, 0x35, 0xcc,
	0x76, 0x1c, 0x09, 0xed, 0x12, 0xe6, 0xeb, 0x94, 0xc6, 0xfd, 0xe0, 0x78, 0x1f, 0xc3, 0x5b, 0x75,
	0x7c, 0xc6, 0xe3, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x34, 0x01, 0x10, 0x19, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkStreamClient is the client API for NetworkStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkStreamClient interface {
	Handle(ctx context.Context, opts ...grpc.CallOption) (NetworkStream_HandleClient, error)
}

type networkStreamClient struct {
	cc *grpc.ClientConn
}

func NewNetworkStreamClient(cc *grpc.ClientConn) NetworkStreamClient {
	return &networkStreamClient{cc}
}

func (c *networkStreamClient) Handle(ctx context.Context, opts ...grpc.CallOption) (NetworkStream_HandleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkStream_serviceDesc.Streams[0], "/cap.NetworkStream/Handle", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkStreamHandleClient{stream}
	return x, nil
}

type NetworkStream_HandleClient interface {
	Send(*StreamPacket) error
	Recv() (*StreamPacket, error)
	grpc.ClientStream
}

type networkStreamHandleClient struct {
	grpc.ClientStream
}

func (x *networkStreamHandleClient) Send(m *StreamPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkStreamHandleClient) Recv() (*StreamPacket, error) {
	m := new(StreamPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkStreamServer is the server API for NetworkStream service.
type NetworkStreamServer interface {
	Handle(NetworkStream_HandleServer) error
}

func RegisterNetworkStreamServer(s *grpc.Server, srv NetworkStreamServer) {
	s.RegisterService(&_NetworkStream_serviceDesc, srv)
}

func _NetworkStream_Handle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkStreamServer).Handle(&networkStreamHandleServer{stream})
}

type NetworkStream_HandleServer interface {
	Send(*StreamPacket) error
	Recv() (*StreamPacket, error)
	grpc.ServerStream
}

type networkStreamHandleServer struct {
	grpc.ServerStream
}

func (x *networkStreamHandleServer) Send(m *StreamPacket) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkStreamHandleServer) Recv() (*StreamPacket, error) {
	m := new(StreamPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NetworkStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cap.NetworkStream",
	HandlerType: (*NetworkStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Handle",
			Handler:       _NetworkStream_Handle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cap.proto",
}

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StoreClient interface {
}

type storeClient struct {
	cc *grpc.ClientConn
}

func NewStoreClient(cc *grpc.ClientConn) StoreClient {
	return &storeClient{cc}
}

// StoreServer is the server API for Store service.
type StoreServer interface {
}

func RegisterStoreServer(s *grpc.Server, srv StoreServer) {
	s.RegisterService(&_Store_serviceDesc, srv)
}

var _Store_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cap.Store",
	HandlerType: (*StoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "cap.proto",
}

// ApplicationClient is the client API for Application service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationClient interface {
}

type applicationClient struct {
	cc *grpc.ClientConn
}

func NewApplicationClient(cc *grpc.ClientConn) ApplicationClient {
	return &applicationClient{cc}
}

// ApplicationServer is the server API for Application service.
type ApplicationServer interface {
}

func RegisterApplicationServer(s *grpc.Server, srv ApplicationServer) {
	s.RegisterService(&_Application_serviceDesc, srv)
}

var _Application_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cap.Application",
	HandlerType: (*ApplicationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "cap.proto",
}
