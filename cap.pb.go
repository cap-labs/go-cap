// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.15.5
// source: cap.proto

package cap

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From    string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`       /// message from node
	To      string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`           /// message send to
	Content []byte `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"` /// message content
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_cap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_cap_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Message) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Message) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type ConsensusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ConsensusRequest) Reset() {
	*x = ConsensusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusRequest) ProtoMessage() {}

func (x *ConsensusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusRequest.ProtoReflect.Descriptor instead.
func (*ConsensusRequest) Descriptor() ([]byte, []int) {
	return file_cap_proto_rawDescGZIP(), []int{1}
}

func (x *ConsensusRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type ConsensusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*ConsensusResponse_SendMessage
	//	*ConsensusResponse_AppRequest
	Content isConsensusResponse_Content `protobuf_oneof:"content"`
}

func (x *ConsensusResponse) Reset() {
	*x = ConsensusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusResponse) ProtoMessage() {}

func (x *ConsensusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusResponse.ProtoReflect.Descriptor instead.
func (*ConsensusResponse) Descriptor() ([]byte, []int) {
	return file_cap_proto_rawDescGZIP(), []int{2}
}

func (m *ConsensusResponse) GetContent() isConsensusResponse_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ConsensusResponse) GetSendMessage() *Message {
	if x, ok := x.GetContent().(*ConsensusResponse_SendMessage); ok {
		return x.SendMessage
	}
	return nil
}

func (x *ConsensusResponse) GetAppRequest() *ApplicationRequest {
	if x, ok := x.GetContent().(*ConsensusResponse_AppRequest); ok {
		return x.AppRequest
	}
	return nil
}

type isConsensusResponse_Content interface {
	isConsensusResponse_Content()
}

type ConsensusResponse_SendMessage struct {
	SendMessage *Message `protobuf:"bytes,1,opt,name=sendMessage,proto3,oneof"` // message send to node
}

type ConsensusResponse_AppRequest struct {
	AppRequest *ApplicationRequest `protobuf:"bytes,2,opt,name=appRequest,proto3,oneof"` // application request
}

func (*ConsensusResponse_SendMessage) isConsensusResponse_Content() {}

func (*ConsensusResponse_AppRequest) isConsensusResponse_Content() {}

type ApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ApplicationRequest) Reset() {
	*x = ApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationRequest) ProtoMessage() {}

func (x *ApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationRequest.ProtoReflect.Descriptor instead.
func (*ApplicationRequest) Descriptor() ([]byte, []int) {
	return file_cap_proto_rawDescGZIP(), []int{3}
}

func (x *ApplicationRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type ApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateSet *StateSetRequest `protobuf:"bytes,1,opt,name=stateSet,proto3" json:"stateSet,omitempty"`
}

func (x *ApplicationResponse) Reset() {
	*x = ApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationResponse) ProtoMessage() {}

func (x *ApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationResponse.ProtoReflect.Descriptor instead.
func (*ApplicationResponse) Descriptor() ([]byte, []int) {
	return file_cap_proto_rawDescGZIP(), []int{4}
}

func (x *ApplicationResponse) GetStateSet() *StateSetRequest {
	if x != nil {
		return x.StateSet
	}
	return nil
}

type StateSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`     // State set key word
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"` // State set value
}

func (x *StateSet) Reset() {
	*x = StateSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateSet) ProtoMessage() {}

func (x *StateSet) ProtoReflect() protoreflect.Message {
	mi := &file_cap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateSet.ProtoReflect.Descriptor instead.
func (*StateSet) Descriptor() ([]byte, []int) {
	return file_cap_proto_rawDescGZIP(), []int{5}
}

func (x *StateSet) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StateSet) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type StateSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    string      `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`       // State to set
	BatchSet []*StateSet `protobuf:"bytes,2,rep,name=batchSet,proto3" json:"batchSet,omitempty"` // State set batch
	MaxSize  uint32      `protobuf:"varint,3,opt,name=maxSize,proto3" json:"maxSize,omitempty"`  // State max size
}

func (x *StateSetRequest) Reset() {
	*x = StateSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateSetRequest) ProtoMessage() {}

func (x *StateSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateSetRequest.ProtoReflect.Descriptor instead.
func (*StateSetRequest) Descriptor() ([]byte, []int) {
	return file_cap_proto_rawDescGZIP(), []int{6}
}

func (x *StateSetRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *StateSetRequest) GetBatchSet() []*StateSet {
	if x != nil {
		return x.BatchSet
	}
	return nil
}

func (x *StateSetRequest) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

type StateSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentSize uint32 `protobuf:"varint,1,opt,name=currentSize,proto3" json:"currentSize,omitempty"` // State current size after set value
}

func (x *StateSetResponse) Reset() {
	*x = StateSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateSetResponse) ProtoMessage() {}

func (x *StateSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateSetResponse.ProtoReflect.Descriptor instead.
func (*StateSetResponse) Descriptor() ([]byte, []int) {
	return file_cap_proto_rawDescGZIP(), []int{7}
}

func (x *StateSetResponse) GetCurrentSize() uint32 {
	if x != nil {
		return x.CurrentSize
	}
	return 0
}

type StateGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"` // State get by keys
}

func (x *StateGetRequest) Reset() {
	*x = StateGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateGetRequest) ProtoMessage() {}

func (x *StateGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateGetRequest.ProtoReflect.Descriptor instead.
func (*StateGetRequest) Descriptor() ([]byte, []int) {
	return file_cap_proto_rawDescGZIP(), []int{8}
}

func (x *StateGetRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type StateGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values      [][]byte `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`            // State get values
	CurrentSize uint32   `protobuf:"varint,2,opt,name=currentSize,proto3" json:"currentSize,omitempty"` // State current size
}

func (x *StateGetResponse) Reset() {
	*x = StateGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateGetResponse) ProtoMessage() {}

func (x *StateGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateGetResponse.ProtoReflect.Descriptor instead.
func (*StateGetResponse) Descriptor() ([]byte, []int) {
	return file_cap_proto_rawDescGZIP(), []int{9}
}

func (x *StateGetResponse) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *StateGetResponse) GetCurrentSize() uint32 {
	if x != nil {
		return x.CurrentSize
	}
	return 0
}

type PeerSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"` // peer set
}

func (x *PeerSetRequest) Reset() {
	*x = PeerSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerSetRequest) ProtoMessage() {}

func (x *PeerSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerSetRequest.ProtoReflect.Descriptor instead.
func (*PeerSetRequest) Descriptor() ([]byte, []int) {
	return file_cap_proto_rawDescGZIP(), []int{10}
}

func (x *PeerSetRequest) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type PeerSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PeerSetResponse) Reset() {
	*x = PeerSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerSetResponse) ProtoMessage() {}

func (x *PeerSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerSetResponse.ProtoReflect.Descriptor instead.
func (*PeerSetResponse) Descriptor() ([]byte, []int) {
	return file_cap_proto_rawDescGZIP(), []int{11}
}

var File_cap_proto protoreflect.FileDescriptor

var file_cap_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x61, 0x70,
	0x22, 0x47, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x2c, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x0b, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x22, 0x32,
	0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x6c, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x08, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x34, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x25, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x4c, 0x0a,
	0x10, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x24, 0x0a, 0x0e, 0x50,
	0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c,
	0x73, 0x22, 0x11, 0x0a, 0x0f, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x4a, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x17, 0x2e,
	0x63, 0x61, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x44, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x37, 0x0a,
	0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x63, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x6c, 0x0a, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x0c,
	0x2e, 0x63, 0x61, 0x70, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0c, 0x2e, 0x63,
	0x61, 0x70, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x34,
	0x0a, 0x07, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x63, 0x61, 0x70, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x63, 0x61, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x7b, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x37, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x63, 0x61,
	0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x47, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x61, 0x70,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x61, 0x70, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x61, 0x70, 0x3b,
	0x63, 0x61, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cap_proto_rawDescOnce sync.Once
	file_cap_proto_rawDescData = file_cap_proto_rawDesc
)

func file_cap_proto_rawDescGZIP() []byte {
	file_cap_proto_rawDescOnce.Do(func() {
		file_cap_proto_rawDescData = protoimpl.X.CompressGZIP(file_cap_proto_rawDescData)
	})
	return file_cap_proto_rawDescData
}

var file_cap_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cap_proto_goTypes = []interface{}{
	(*Message)(nil),             // 0: cap.Message
	(*ConsensusRequest)(nil),    // 1: cap.ConsensusRequest
	(*ConsensusResponse)(nil),   // 2: cap.ConsensusResponse
	(*ApplicationRequest)(nil),  // 3: cap.ApplicationRequest
	(*ApplicationResponse)(nil), // 4: cap.ApplicationResponse
	(*StateSet)(nil),            // 5: cap.StateSet
	(*StateSetRequest)(nil),     // 6: cap.StateSetRequest
	(*StateSetResponse)(nil),    // 7: cap.StateSetResponse
	(*StateGetRequest)(nil),     // 8: cap.StateGetRequest
	(*StateGetResponse)(nil),    // 9: cap.StateGetResponse
	(*PeerSetRequest)(nil),      // 10: cap.PeerSetRequest
	(*PeerSetResponse)(nil),     // 11: cap.PeerSetResponse
}
var file_cap_proto_depIdxs = []int32{
	0,  // 0: cap.ConsensusResponse.sendMessage:type_name -> cap.Message
	3,  // 1: cap.ConsensusResponse.appRequest:type_name -> cap.ApplicationRequest
	6,  // 2: cap.ApplicationResponse.stateSet:type_name -> cap.StateSetRequest
	5,  // 3: cap.StateSetRequest.batchSet:type_name -> cap.StateSet
	3,  // 4: cap.Application.Handle:input_type -> cap.ApplicationRequest
	1,  // 5: cap.Consensus.Handle:input_type -> cap.ConsensusRequest
	0,  // 6: cap.Networking.Handle:input_type -> cap.Message
	10, // 7: cap.Networking.PeerSet:input_type -> cap.PeerSetRequest
	6,  // 8: cap.Storage.StateSet:input_type -> cap.StateSetRequest
	8,  // 9: cap.Storage.StateGet:input_type -> cap.StateGetRequest
	4,  // 10: cap.Application.Handle:output_type -> cap.ApplicationResponse
	2,  // 11: cap.Consensus.Handle:output_type -> cap.ConsensusResponse
	0,  // 12: cap.Networking.Handle:output_type -> cap.Message
	11, // 13: cap.Networking.PeerSet:output_type -> cap.PeerSetResponse
	7,  // 14: cap.Storage.StateSet:output_type -> cap.StateSetResponse
	9,  // 15: cap.Storage.StateGet:output_type -> cap.StateGetResponse
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_cap_proto_init() }
func file_cap_proto_init() {
	if File_cap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cap_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cap_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ConsensusResponse_SendMessage)(nil),
		(*ConsensusResponse_AppRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cap_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_cap_proto_goTypes,
		DependencyIndexes: file_cap_proto_depIdxs,
		MessageInfos:      file_cap_proto_msgTypes,
	}.Build()
	File_cap_proto = out.File
	file_cap_proto_rawDesc = nil
	file_cap_proto_goTypes = nil
	file_cap_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ApplicationClient is the client API for Application service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationClient interface {
	Handle(ctx context.Context, in *ApplicationRequest, opts ...grpc.CallOption) (*ApplicationResponse, error)
}

type applicationClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationClient(cc grpc.ClientConnInterface) ApplicationClient {
	return &applicationClient{cc}
}

func (c *applicationClient) Handle(ctx context.Context, in *ApplicationRequest, opts ...grpc.CallOption) (*ApplicationResponse, error) {
	out := new(ApplicationResponse)
	err := c.cc.Invoke(ctx, "/cap.Application/Handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationServer is the server API for Application service.
type ApplicationServer interface {
	Handle(context.Context, *ApplicationRequest) (*ApplicationResponse, error)
}

// UnimplementedApplicationServer can be embedded to have forward compatible implementations.
type UnimplementedApplicationServer struct {
}

func (*UnimplementedApplicationServer) Handle(context.Context, *ApplicationRequest) (*ApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handle not implemented")
}

func RegisterApplicationServer(s *grpc.Server, srv ApplicationServer) {
	s.RegisterService(&_Application_serviceDesc, srv)
}

func _Application_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.Application/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).Handle(ctx, req.(*ApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Application_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cap.Application",
	HandlerType: (*ApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handle",
			Handler:    _Application_Handle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cap.proto",
}

// ConsensusClient is the client API for Consensus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsensusClient interface {
	Handle(ctx context.Context, in *ConsensusRequest, opts ...grpc.CallOption) (*ConsensusResponse, error)
}

type consensusClient struct {
	cc grpc.ClientConnInterface
}

func NewConsensusClient(cc grpc.ClientConnInterface) ConsensusClient {
	return &consensusClient{cc}
}

func (c *consensusClient) Handle(ctx context.Context, in *ConsensusRequest, opts ...grpc.CallOption) (*ConsensusResponse, error) {
	out := new(ConsensusResponse)
	err := c.cc.Invoke(ctx, "/cap.Consensus/Handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsensusServer is the server API for Consensus service.
type ConsensusServer interface {
	Handle(context.Context, *ConsensusRequest) (*ConsensusResponse, error)
}

// UnimplementedConsensusServer can be embedded to have forward compatible implementations.
type UnimplementedConsensusServer struct {
}

func (*UnimplementedConsensusServer) Handle(context.Context, *ConsensusRequest) (*ConsensusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handle not implemented")
}

func RegisterConsensusServer(s *grpc.Server, srv ConsensusServer) {
	s.RegisterService(&_Consensus_serviceDesc, srv)
}

func _Consensus_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsensusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.Consensus/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServer).Handle(ctx, req.(*ConsensusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Consensus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cap.Consensus",
	HandlerType: (*ConsensusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handle",
			Handler:    _Consensus_Handle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cap.proto",
}

// NetworkingClient is the client API for Networking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkingClient interface {
	Handle(ctx context.Context, opts ...grpc.CallOption) (Networking_HandleClient, error)
	/// Update networking peer set
	PeerSet(ctx context.Context, in *PeerSetRequest, opts ...grpc.CallOption) (*PeerSetResponse, error)
}

type networkingClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkingClient(cc grpc.ClientConnInterface) NetworkingClient {
	return &networkingClient{cc}
}

func (c *networkingClient) Handle(ctx context.Context, opts ...grpc.CallOption) (Networking_HandleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Networking_serviceDesc.Streams[0], "/cap.Networking/Handle", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkingHandleClient{stream}
	return x, nil
}

type Networking_HandleClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type networkingHandleClient struct {
	grpc.ClientStream
}

func (x *networkingHandleClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkingHandleClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkingClient) PeerSet(ctx context.Context, in *PeerSetRequest, opts ...grpc.CallOption) (*PeerSetResponse, error) {
	out := new(PeerSetResponse)
	err := c.cc.Invoke(ctx, "/cap.Networking/PeerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkingServer is the server API for Networking service.
type NetworkingServer interface {
	Handle(Networking_HandleServer) error
	/// Update networking peer set
	PeerSet(context.Context, *PeerSetRequest) (*PeerSetResponse, error)
}

// UnimplementedNetworkingServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkingServer struct {
}

func (*UnimplementedNetworkingServer) Handle(Networking_HandleServer) error {
	return status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (*UnimplementedNetworkingServer) PeerSet(context.Context, *PeerSetRequest) (*PeerSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerSet not implemented")
}

func RegisterNetworkingServer(s *grpc.Server, srv NetworkingServer) {
	s.RegisterService(&_Networking_serviceDesc, srv)
}

func _Networking_Handle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkingServer).Handle(&networkingHandleServer{stream})
}

type Networking_HandleServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type networkingHandleServer struct {
	grpc.ServerStream
}

func (x *networkingHandleServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkingHandleServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Networking_PeerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkingServer).PeerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.Networking/PeerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkingServer).PeerSet(ctx, req.(*PeerSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Networking_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cap.Networking",
	HandlerType: (*NetworkingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PeerSet",
			Handler:    _Networking_PeerSet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Handle",
			Handler:       _Networking_Handle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cap.proto",
}

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageClient interface {
	StateSet(ctx context.Context, in *StateSetRequest, opts ...grpc.CallOption) (*StateSetResponse, error)
	StateGet(ctx context.Context, in *StateGetRequest, opts ...grpc.CallOption) (*StateGetResponse, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) StateSet(ctx context.Context, in *StateSetRequest, opts ...grpc.CallOption) (*StateSetResponse, error) {
	out := new(StateSetResponse)
	err := c.cc.Invoke(ctx, "/cap.Storage/StateSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) StateGet(ctx context.Context, in *StateGetRequest, opts ...grpc.CallOption) (*StateGetResponse, error) {
	out := new(StateGetResponse)
	err := c.cc.Invoke(ctx, "/cap.Storage/StateGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
type StorageServer interface {
	StateSet(context.Context, *StateSetRequest) (*StateSetResponse, error)
	StateGet(context.Context, *StateGetRequest) (*StateGetResponse, error)
}

// UnimplementedStorageServer can be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (*UnimplementedStorageServer) StateSet(context.Context, *StateSetRequest) (*StateSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateSet not implemented")
}
func (*UnimplementedStorageServer) StateGet(context.Context, *StateGetRequest) (*StateGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateGet not implemented")
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_StateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).StateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.Storage/StateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).StateSet(ctx, req.(*StateSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_StateGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).StateGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.Storage/StateGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).StateGet(ctx, req.(*StateGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cap.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StateSet",
			Handler:    _Storage_StateSet_Handler,
		},
		{
			MethodName: "StateGet",
			Handler:    _Storage_StateGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cap.proto",
}
