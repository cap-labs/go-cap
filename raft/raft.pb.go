// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

package raft

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_Leader    Status = 0
	Status_Follower  Status = 1
	Status_Candidate Status = 2
)

var Status_name = map[int32]string{
	0: "Leader",
	1: "Follower",
	2: "Candidate",
}

var Status_value = map[string]int32{
	"Leader":    0,
	"Follower":  1,
	"Candidate": 2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}

type Entry_Type int32

const (
	Entry_normal        Entry_Type = 0
	Entry_changeCluster Entry_Type = 1
)

var Entry_Type_name = map[int32]string{
	0: "normal",
	1: "changeCluster",
}

var Entry_Type_value = map[string]int32{
	"normal":        0,
	"changeCluster": 1,
}

func (x Entry_Type) String() string {
	return proto.EnumName(Entry_Type_name, int32(x))
}

func (Entry_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{3, 0}
}

// Receiver implementation:
// 1. Reply false if term < currentTerm (§5.1)
// 2. If votedFor is null or candidateId, and candidate’s log is at
//    least as up-to-date as receiver’s log, grant vote (§5.2, §5.4)
type RequestVote struct {
	Term                 int64    `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	CandidateId          string   `protobuf:"bytes,2,opt,name=candidateId,proto3" json:"candidateId,omitempty"`
	LastLogIndex         int64    `protobuf:"varint,3,opt,name=lastLogIndex,proto3" json:"lastLogIndex,omitempty"`
	LastLogTerm          int64    `protobuf:"varint,4,opt,name=lastLogTerm,proto3" json:"lastLogTerm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestVote) Reset()         { *m = RequestVote{} }
func (m *RequestVote) String() string { return proto.CompactTextString(m) }
func (*RequestVote) ProtoMessage()    {}
func (*RequestVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}

func (m *RequestVote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestVote.Unmarshal(m, b)
}
func (m *RequestVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestVote.Marshal(b, m, deterministic)
}
func (m *RequestVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVote.Merge(m, src)
}
func (m *RequestVote) XXX_Size() int {
	return xxx_messageInfo_RequestVote.Size(m)
}
func (m *RequestVote) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVote.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVote proto.InternalMessageInfo

func (m *RequestVote) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVote) GetCandidateId() string {
	if m != nil {
		return m.CandidateId
	}
	return ""
}

func (m *RequestVote) GetLastLogIndex() int64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVote) GetLastLogTerm() int64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type ResponseVote struct {
	Term                 int64    `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	VoteGranted          bool     `protobuf:"varint,2,opt,name=voteGranted,proto3" json:"voteGranted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseVote) Reset()         { *m = ResponseVote{} }
func (m *ResponseVote) String() string { return proto.CompactTextString(m) }
func (*ResponseVote) ProtoMessage()    {}
func (*ResponseVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{1}
}

func (m *ResponseVote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseVote.Unmarshal(m, b)
}
func (m *ResponseVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseVote.Marshal(b, m, deterministic)
}
func (m *ResponseVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseVote.Merge(m, src)
}
func (m *ResponseVote) XXX_Size() int {
	return xxx_messageInfo_ResponseVote.Size(m)
}
func (m *ResponseVote) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseVote.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseVote proto.InternalMessageInfo

func (m *ResponseVote) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *ResponseVote) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

// Receiver implementation:
// 1. Reply false if term < currentTerm (§5.1)
// 2. Reply false if log doesn’t contain an entry at prevLogIndex
//    whose term matches prevLogTerm (§5.3)
// 3. If an existing entry conflicts with a new one (same index
//    but different terms), delete the existing entry and all that
//    follow it (§5.3)
// 4. Append any new entries not already in the log
// 5. If leaderCommit > commitIndex, set commitIndex =
//    min(leaderCommit, index of last new entry)
type RequestAppendEntries struct {
	Term         int64    `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	LeaderId     string   `protobuf:"bytes,2,opt,name=leaderId,proto3" json:"leaderId,omitempty"`
	PrevLogIndex int64    `protobuf:"varint,3,opt,name=prevLogIndex,proto3" json:"prevLogIndex,omitempty"`
	PrevLogTerm  int64    `protobuf:"varint,4,opt,name=prevLogTerm,proto3" json:"prevLogTerm,omitempty"`
	Entries      [][]byte `protobuf:"bytes,5,rep,name=entries,proto3" json:"entries,omitempty"`
	// send more than one for efficiency)
	LeaderCommit         int64    `protobuf:"varint,6,opt,name=leaderCommit,proto3" json:"leaderCommit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestAppendEntries) Reset()         { *m = RequestAppendEntries{} }
func (m *RequestAppendEntries) String() string { return proto.CompactTextString(m) }
func (*RequestAppendEntries) ProtoMessage()    {}
func (*RequestAppendEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{2}
}

func (m *RequestAppendEntries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestAppendEntries.Unmarshal(m, b)
}
func (m *RequestAppendEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestAppendEntries.Marshal(b, m, deterministic)
}
func (m *RequestAppendEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestAppendEntries.Merge(m, src)
}
func (m *RequestAppendEntries) XXX_Size() int {
	return xxx_messageInfo_RequestAppendEntries.Size(m)
}
func (m *RequestAppendEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestAppendEntries.DiscardUnknown(m)
}

var xxx_messageInfo_RequestAppendEntries proto.InternalMessageInfo

func (m *RequestAppendEntries) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestAppendEntries) GetLeaderId() string {
	if m != nil {
		return m.LeaderId
	}
	return ""
}

func (m *RequestAppendEntries) GetPrevLogIndex() int64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *RequestAppendEntries) GetPrevLogTerm() int64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *RequestAppendEntries) GetEntries() [][]byte {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *RequestAppendEntries) GetLeaderCommit() int64 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

type Entry struct {
	Index                int64      `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Term                 int64      `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Type                 Entry_Type `protobuf:"varint,3,opt,name=type,proto3,enum=raft.Entry_Type" json:"type,omitempty"`
	Data                 []byte     `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{3}
}

func (m *Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entry.Unmarshal(m, b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return xxx_messageInfo_Entry.Size(m)
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Entry) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *Entry) GetType() Entry_Type {
	if m != nil {
		return m.Type
	}
	return Entry_normal
}

func (m *Entry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ResponseAppendEntries struct {
	Term                 int64    `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Success              bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseAppendEntries) Reset()         { *m = ResponseAppendEntries{} }
func (m *ResponseAppendEntries) String() string { return proto.CompactTextString(m) }
func (*ResponseAppendEntries) ProtoMessage()    {}
func (*ResponseAppendEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{4}
}

func (m *ResponseAppendEntries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseAppendEntries.Unmarshal(m, b)
}
func (m *ResponseAppendEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseAppendEntries.Marshal(b, m, deterministic)
}
func (m *ResponseAppendEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseAppendEntries.Merge(m, src)
}
func (m *ResponseAppendEntries) XXX_Size() int {
	return xxx_messageInfo_ResponseAppendEntries.Size(m)
}
func (m *ResponseAppendEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseAppendEntries.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseAppendEntries proto.InternalMessageInfo

func (m *ResponseAppendEntries) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *ResponseAppendEntries) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// Invoked by leader to send chunks of a snapshot to a follower. Leaders always
// send chunks in order.
// Receiver implementation:
// 1. Reply immediately if term < currentTerm
// 2. Create new snapshot file if first chunk (offset is 0)
// 3. Write data into snapshot file at given offset
// 4. Reply and wait for more data chunks if done is false
// 5. Save snapshot file, discard any existing or partial snapshot
//    with a smaller index
// 6. If existing log entry has same index and term as snapshot’s
//    last included entry, retain log entries following it and reply
// 7. Discard the entire log
// 8. Reset state machine using snapshot contents (and load
//    snapshot’s cluster configuration)
type RequestInstallSnapshot struct {
	Term              int64  `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	LeaderId          string `protobuf:"bytes,2,opt,name=leaderId,proto3" json:"leaderId,omitempty"`
	LastIncludedIndex int64  `protobuf:"varint,3,opt,name=lastIncludedIndex,proto3" json:"lastIncludedIndex,omitempty"`
	// and including this index
	LastIncludedTerm int64 `protobuf:"varint,4,opt,name=lastIncludedTerm,proto3" json:"lastIncludedTerm,omitempty"`
	Offset           int64 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// where chunk is positioned in the snapshot file
	Data                 []byte   `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Done                 bool     `protobuf:"varint,7,opt,name=done,proto3" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestInstallSnapshot) Reset()         { *m = RequestInstallSnapshot{} }
func (m *RequestInstallSnapshot) String() string { return proto.CompactTextString(m) }
func (*RequestInstallSnapshot) ProtoMessage()    {}
func (*RequestInstallSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{5}
}

func (m *RequestInstallSnapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestInstallSnapshot.Unmarshal(m, b)
}
func (m *RequestInstallSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestInstallSnapshot.Marshal(b, m, deterministic)
}
func (m *RequestInstallSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestInstallSnapshot.Merge(m, src)
}
func (m *RequestInstallSnapshot) XXX_Size() int {
	return xxx_messageInfo_RequestInstallSnapshot.Size(m)
}
func (m *RequestInstallSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestInstallSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_RequestInstallSnapshot proto.InternalMessageInfo

func (m *RequestInstallSnapshot) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestInstallSnapshot) GetLeaderId() string {
	if m != nil {
		return m.LeaderId
	}
	return ""
}

func (m *RequestInstallSnapshot) GetLastIncludedIndex() int64 {
	if m != nil {
		return m.LastIncludedIndex
	}
	return 0
}

func (m *RequestInstallSnapshot) GetLastIncludedTerm() int64 {
	if m != nil {
		return m.LastIncludedTerm
	}
	return 0
}

func (m *RequestInstallSnapshot) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *RequestInstallSnapshot) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RequestInstallSnapshot) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type ResponseInstallSnapshot struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseInstallSnapshot) Reset()         { *m = ResponseInstallSnapshot{} }
func (m *ResponseInstallSnapshot) String() string { return proto.CompactTextString(m) }
func (*ResponseInstallSnapshot) ProtoMessage()    {}
func (*ResponseInstallSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{6}
}

func (m *ResponseInstallSnapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseInstallSnapshot.Unmarshal(m, b)
}
func (m *ResponseInstallSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseInstallSnapshot.Marshal(b, m, deterministic)
}
func (m *ResponseInstallSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseInstallSnapshot.Merge(m, src)
}
func (m *ResponseInstallSnapshot) XXX_Size() int {
	return xxx_messageInfo_ResponseInstallSnapshot.Size(m)
}
func (m *ResponseInstallSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseInstallSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseInstallSnapshot proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("raft.Status", Status_name, Status_value)
	proto.RegisterEnum("raft.Entry_Type", Entry_Type_name, Entry_Type_value)
	proto.RegisterType((*RequestVote)(nil), "raft.RequestVote")
	proto.RegisterType((*ResponseVote)(nil), "raft.ResponseVote")
	proto.RegisterType((*RequestAppendEntries)(nil), "raft.RequestAppendEntries")
	proto.RegisterType((*Entry)(nil), "raft.Entry")
	proto.RegisterType((*ResponseAppendEntries)(nil), "raft.ResponseAppendEntries")
	proto.RegisterType((*RequestInstallSnapshot)(nil), "raft.RequestInstallSnapshot")
	proto.RegisterType((*ResponseInstallSnapshot)(nil), "raft.ResponseInstallSnapshot")
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor_b042552c306ae59b) }

var fileDescriptor_b042552c306ae59b = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5f, 0x6e, 0xd3, 0x4c,
	0x10, 0xaf, 0x13, 0xc7, 0x49, 0xa7, 0xc9, 0xf7, 0x39, 0xab, 0x52, 0x4c, 0x00, 0x29, 0xb2, 0x40,
	0x8a, 0x2a, 0x88, 0x44, 0x39, 0x01, 0x0a, 0x05, 0x22, 0x15, 0x1e, 0xdc, 0x8a, 0xf7, 0xc5, 0x9e,
	0x34, 0x91, 0x9c, 0x5d, 0xe3, 0x1d, 0x17, 0x72, 0x04, 0x5e, 0x39, 0x16, 0x57, 0xe0, 0x8d, 0x93,
	0xa0, 0x5d, 0xdb, 0x61, 0xed, 0x22, 0x10, 0x6f, 0x3b, 0xbf, 0xd9, 0x19, 0xff, 0xfe, 0x64, 0x03,
	0x90, 0xf3, 0x15, 0xcd, 0xb3, 0x5c, 0x92, 0x64, 0xae, 0x3e, 0x87, 0x5f, 0x1c, 0x38, 0x8a, 0xf0,
	0x63, 0x81, 0x8a, 0xde, 0x4b, 0x42, 0xc6, 0xc0, 0x25, 0xcc, 0xb7, 0x81, 0x33, 0x75, 0x66, 0xdd,
	0xc8, 0x9c, 0xd9, 0x14, 0x8e, 0x62, 0x2e, 0x92, 0x4d, 0xc2, 0x09, 0x97, 0x49, 0xd0, 0x99, 0x3a,
	0xb3, 0xc3, 0xc8, 0x86, 0x58, 0x08, 0xc3, 0x94, 0x2b, 0xba, 0x90, 0xd7, 0x4b, 0x91, 0xe0, 0xe7,
	0xa0, 0x6b, 0xa6, 0x1b, 0x98, 0xde, 0x52, 0xd5, 0x57, 0xfa, 0x03, 0xae, 0xb9, 0x62, 0x43, 0xe1,
	0x4b, 0x18, 0x46, 0xa8, 0x32, 0x29, 0x14, 0xfe, 0x89, 0xcb, 0x8d, 0x24, 0x7c, 0x9d, 0x73, 0x41,
	0x58, 0x72, 0x19, 0x44, 0x36, 0x14, 0x7e, 0x73, 0xe0, 0xb8, 0x52, 0xf4, 0x22, 0xcb, 0x50, 0x24,
	0xe7, 0x82, 0xf2, 0x0d, 0xaa, 0xdf, 0xae, 0x9b, 0xc0, 0x20, 0x45, 0x9e, 0x60, 0xbe, 0xd7, 0xb5,
	0xaf, 0xb5, 0xa8, 0x2c, 0xc7, 0x9b, 0xb6, 0x28, 0x1b, 0xd3, 0x74, 0xaa, 0xda, 0x16, 0x65, 0x41,
	0x2c, 0x80, 0x3e, 0x96, 0x04, 0x82, 0xde, 0xb4, 0x3b, 0x1b, 0x46, 0x75, 0x69, 0x4c, 0x33, 0xdf,
	0x5a, 0xc8, 0xed, 0x76, 0x43, 0x81, 0x57, 0x99, 0x66, 0x61, 0xe1, 0x57, 0x07, 0x7a, 0x9a, 0xff,
	0x8e, 0x1d, 0x43, 0x6f, 0x63, 0x68, 0x94, 0xf4, 0xcb, 0x62, 0xaf, 0xa9, 0x63, 0x69, 0x7a, 0x04,
	0x2e, 0xed, 0x32, 0x34, 0x7c, 0xff, 0x3b, 0xf3, 0xe7, 0x26, 0x73, 0xb3, 0x64, 0x7e, 0xb5, 0xcb,
	0x30, 0x32, 0x5d, 0x3d, 0x99, 0x70, 0xe2, 0x86, 0xf2, 0x30, 0x32, 0xe7, 0xf0, 0x31, 0xb8, 0xfa,
	0x06, 0x03, 0xf0, 0x84, 0xcc, 0xb7, 0x3c, 0xf5, 0x0f, 0xd8, 0x18, 0x46, 0xf1, 0x9a, 0x8b, 0x6b,
	0x5c, 0xa4, 0x85, 0x22, 0xcc, 0x7d, 0x27, 0x3c, 0x87, 0x3b, 0x75, 0x4e, 0x7f, 0x77, 0x38, 0x80,
	0xbe, 0x2a, 0xe2, 0x18, 0x95, 0xaa, 0xc2, 0xaa, 0xcb, 0xf0, 0x87, 0x03, 0x27, 0x55, 0x50, 0x4b,
	0xa1, 0x88, 0xa7, 0xe9, 0xa5, 0xe0, 0x99, 0x5a, 0x4b, 0xfa, 0xe7, 0xa8, 0x9e, 0xc0, 0x58, 0xff,
	0x90, 0x96, 0x22, 0x4e, 0x8b, 0x04, 0x13, 0x3b, 0xaf, 0xdb, 0x0d, 0x76, 0x0a, 0xbe, 0x0d, 0x5a,
	0xc9, 0xdd, 0xc2, 0xd9, 0x09, 0x78, 0x72, 0xb5, 0x52, 0x48, 0x41, 0xcf, 0xdc, 0xa8, 0xaa, 0xbd,
	0x7d, 0xde, 0x2f, 0xfb, 0x0c, 0x26, 0x05, 0x06, 0x7d, 0xa3, 0xd3, 0x9c, 0xc3, 0x7b, 0x70, 0xb7,
	0xf6, 0xaa, 0x25, 0xf2, 0xf4, 0x19, 0x78, 0x97, 0xc4, 0xa9, 0x50, 0xda, 0xef, 0x0b, 0x23, 0xc5,
	0x3f, 0x60, 0x43, 0x18, 0xbc, 0x92, 0x69, 0x2a, 0x3f, 0x69, 0xab, 0xd9, 0x08, 0x0e, 0x17, 0xf5,
	0x3b, 0xf3, 0x3b, 0x67, 0xdf, 0x1d, 0xf0, 0x23, 0xbe, 0x22, 0x3d, 0x87, 0x6f, 0x79, 0xbc, 0xde,
	0x08, 0x64, 0x4f, 0xc1, 0x35, 0xcf, 0x65, 0x5c, 0x26, 0x6d, 0xbd, 0xe6, 0x09, 0xab, 0x21, 0xeb,
	0x55, 0xbd, 0x81, 0x51, 0x33, 0xb5, 0x49, 0x63, 0xae, 0xd1, 0x9b, 0xdc, 0x6f, 0x2e, 0x68, 0x0e,
	0xbe, 0x83, 0xff, 0xdb, 0xc1, 0x3d, 0x68, 0xec, 0x6a, 0x75, 0x27, 0x0f, 0x9b, 0xdb, 0x5a, 0xed,
	0x0f, 0x9e, 0xf9, 0x63, 0x7a, 0xfe, 0x33, 0x00, 0x00, 0xff, 0xff, 0x69, 0xdb, 0xeb, 0x9d, 0xa6,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftStateMachineClient is the client API for RaftStateMachine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftStateMachineClient interface {
	Vote(ctx context.Context, in *RequestVote, opts ...grpc.CallOption) (*ResponseVote, error)
	AppendEntries(ctx context.Context, in *RequestAppendEntries, opts ...grpc.CallOption) (*ResponseAppendEntries, error)
	InstallSnapshot(ctx context.Context, in *RequestInstallSnapshot, opts ...grpc.CallOption) (*ResponseInstallSnapshot, error)
}

type raftStateMachineClient struct {
	cc *grpc.ClientConn
}

func NewRaftStateMachineClient(cc *grpc.ClientConn) RaftStateMachineClient {
	return &raftStateMachineClient{cc}
}

func (c *raftStateMachineClient) Vote(ctx context.Context, in *RequestVote, opts ...grpc.CallOption) (*ResponseVote, error) {
	out := new(ResponseVote)
	err := c.cc.Invoke(ctx, "/raft.RaftStateMachine/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftStateMachineClient) AppendEntries(ctx context.Context, in *RequestAppendEntries, opts ...grpc.CallOption) (*ResponseAppendEntries, error) {
	out := new(ResponseAppendEntries)
	err := c.cc.Invoke(ctx, "/raft.RaftStateMachine/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftStateMachineClient) InstallSnapshot(ctx context.Context, in *RequestInstallSnapshot, opts ...grpc.CallOption) (*ResponseInstallSnapshot, error) {
	out := new(ResponseInstallSnapshot)
	err := c.cc.Invoke(ctx, "/raft.RaftStateMachine/InstallSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftStateMachineServer is the server API for RaftStateMachine service.
type RaftStateMachineServer interface {
	Vote(context.Context, *RequestVote) (*ResponseVote, error)
	AppendEntries(context.Context, *RequestAppendEntries) (*ResponseAppendEntries, error)
	InstallSnapshot(context.Context, *RequestInstallSnapshot) (*ResponseInstallSnapshot, error)
}

func RegisterRaftStateMachineServer(s *grpc.Server, srv RaftStateMachineServer) {
	s.RegisterService(&_RaftStateMachine_serviceDesc, srv)
}

func _RaftStateMachine_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftStateMachineServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftStateMachine/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftStateMachineServer).Vote(ctx, req.(*RequestVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftStateMachine_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAppendEntries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftStateMachineServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftStateMachine/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftStateMachineServer).AppendEntries(ctx, req.(*RequestAppendEntries))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftStateMachine_InstallSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInstallSnapshot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftStateMachineServer).InstallSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftStateMachine/InstallSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftStateMachineServer).InstallSnapshot(ctx, req.(*RequestInstallSnapshot))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftStateMachine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.RaftStateMachine",
	HandlerType: (*RaftStateMachineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _RaftStateMachine_Vote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _RaftStateMachine_AppendEntries_Handler,
		},
		{
			MethodName: "InstallSnapshot",
			Handler:    _RaftStateMachine_InstallSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}
